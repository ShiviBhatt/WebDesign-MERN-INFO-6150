{"version":3,"sources":["components/nav-bar/NavBar.js","components/add-new-Btn/AddNewBtn.js","components/add-new-item/AddNewItem.js","components/item/Item.js","components/items/Items.js","components/App.js","serviceWorker.js","index.js"],"names":["props","state","className","React","Component","evt","preventDefault","this","addDiv","onClick","addBtn","bind","event","console","log","requestOptions","method","headers","body","JSON","stringify","title","description","dueDate","dueTime","fetch","then","response","json","data","handler","alert","setState","target","value","date","type","name","onChange","changeTitle","required","changeDesc","changeDueDate","changeDueTime","addItem","id","obj","_id","showDescription","disabled","status","createdDate","createdTime","match","exec","createdAt","callback","message","toogleDescription","deleteItem","editItems","hidden","markcomplete","updateItem","items","isloaded","map","c","componentDidMount","App","newItem","forRefresh","bool","changeNewItem","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.51932afe.chunk.js","sourcesContent":["import React from 'react';\nimport './NavBar.scss';\n// Nav Bar Styling\nexport default class extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={};\n  }\n\n  \n  render(){\n    return (\n      <nav className=\"nav-bar\">\n          Todo App\n      </nav>\n    );\n  }\n}\n","import React from 'react';\nimport './AddNewBtn.scss';\n\n// -------------------------Add New Button--------------------------\nexport default class extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={};\n  }\n  /* below function will be called whenever add button is clicked and \n  it will all addDiv callback function which will render add Item div in DOM. */\n  addBtn(evt){\n    evt.preventDefault();\n    this.props.addDiv(true);\n  }\n\n  // Rendering the add button\n  render(){\n    return (\n      <div className=\"addBtn\">\n          <button onClick={this.addBtn.bind(this)}>ADD A NEW ITEM</button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './AddNewItem.scss';\n\n// Add new Button\nexport default class extends React.Component{\n  constructor(props){\n    super(props);\n    // title, description,date and items of states are declared\n    this.state={\n        \"title\":\"\",\n        \"description\":\"\",\n        \"date\":null,\n        \"dueDate\":\"\",\n        \"dueTime\":\"\",\n        \"items\":[]\n    };\n  }\n\n  //Method to add new item.\n  addItem(event){\n      event.preventDefault();\n      console.log(this.state);\n      /* headers for API is set here. */\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body:JSON.stringify({title:this.state.title,description:this.state.description,dueDate:this.state.dueDate,dueTime:this.state.dueTime})\n      };\n      /* API for sending data is called here */\n      fetch('http://localhost:3000/todos/', requestOptions)\n        .then(response => response.json())\n        .then(data => \n          console.log(data));\n\n      this.props.handler();\n      alert('click on refresh to get the updated to-do list');\n  }\n\n  /* this function is called whenever title input field is changed */\n  changeTitle(event){\n    event.preventDefault();\n    this.setState({\n        title:event.target.value\n    });\n  }\n\n    /* this function is called whenever date input field is changed */\n  changeDate(event){\n    event.preventDefault();\n    this.setState({\n        date:event.target.value\n    });\n  }\n    /* this function is called whenever description input field is changed */\n  changeDesc(event){\n    event.preventDefault();\n    this.setState({\n      description:event.target.value\n    });\n  }\n\n  changeDueDate(event){\n    event.preventDefault();\n    this.setState({\n      dueDate:event.target.value\n    });\n  }\n\n  changeDueTime(event){\n    event.preventDefault();\n    this.setState({\n      dueTime:event.target.value\n    });\n  }\n\n    // Render Title, Description, Date and Time\n  render(){\n    return (\n      <div className=\"add-card\">\n        <form>\n          <label>Title : &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</label>\n          <input type=\"text\" name=\"title\" onChange={this.changeTitle.bind(this)} required />\n          <br /><br />\n          <label>Description : &nbsp;</label>\n          <input type=\"text\" name=\"desc\" onChange={this.changeDesc.bind(this)} />\n          <br /><br />\n          <label>Due Date : &nbsp;&nbsp;&nbsp;&nbsp;</label>\n          <input type=\"text\" name=\"desc\" onChange={this.changeDueDate.bind(this)} />\n\n          <br /><br />\n          <label>Due Time : &nbsp; &nbsp;</label>\n          <input type=\"text\" name=\"desc\" onChange={this.changeDueTime.bind(this)} />\n\n          <br></br><br></br>\n          <button onClick={this.addItem.bind(this)}>Add</button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Item.scss';\n\n  // constructor will set the field of state\nexport default class extends React.Component{\n\n  constructor(props){\n    super(props);\n    console.log(props);\n    \n    this.state={\n        id:props.obj._id,\n        showDescription:false,\n        title:props.obj.title,\n        disabled:true,\n        description:props.obj.description,\n        status: props.obj.status,\n        dueDate: props.obj.dueDate,\n        dueTime: props.obj.dueTime,\n        createdDate:null,\n        createdTime:null,\n    };\n\n  }\n  /* below function will be called when component is rendered in DOM */\n  componentDidMount(){\n   \n    //Code to format created date and time\n    let pattern1 = /(\\d{4})-(\\d{1,2})-(\\d{1,2})T(\\d{1,2}:\\d{1,2})/gi;\n    let match = pattern1.exec(this.props.obj.createdAt);\n\n    // //formatted date will be stored in state\n    this.setState({createdDate:match[2]+'/'+match[3]+\"/\"+match[2],createdTime:match[4]});\n   // this.setState({createdDate:this.props.obj.createdDate});\n  }\n\n  //Below function will be called to delete a To-do Item.\n  deleteItem(event){\n    event.preventDefault();\n\n    /* api for deleting data is called here */\n    const requestOptions = {\n      method: 'DELETE'\n    };\n    \n    fetch('http://localhost:3000/todos/'+this.state.id, requestOptions)\n      .then(response => response.json())\n      .then(data => \n        console.log(data));\n      this.props.callback();\n  }\n\n  //below function is used to Update a To-do item.\n  updateItem(){\n \n\n    this.setState({disabled:true});\n\n    /* api for Updating data is called here */\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body:JSON.stringify({title:this.state.title,description:this.state.description,status:this.state.status})\n    };\n    fetch('http://localhost:3000/todos/'+this.state.id, requestOptions)\n      .then(response => response.json())\n      .then(data => \n        console.log(data));\n  }\n\n  //Below function is used to update status of An item.\n   async markcomplete(event){\n\n   event.preventDefault();\n      this.setState({status:true});\n      \n      /* API for Updating data is called here */\n      // const requestOptions = {\n      //   method: 'PUT',\n      //   headers :{'Content-Type': 'application/json'},\n      //   body: JSON.stringify({title:this.state.title,description:this.state.description,status: true})\n        \n      // };\n      // fetch('http://localhost:3000/todos/5fc21acc72a24466fc90ff43', requestOptions)\n      //   .then(response => response.json())\n      //   .then(data => \n      //     console.log(data));\n\n\n  try {\n    const response = await fetch('http://localhost:3000/todos/' + this.state.id, {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({title:this.state.title,description:this.state.description,status: true})\n    });\n    return response;\n    } catch (error) {\n    console.log(\"Some issue occured !!\", error.message);\n    }\n  }\n\n\n\n\n  //below function is called whenever title input field is changed.\n  changeTitle(event){\n    event.preventDefault();\n    this.setState({\n        title:event.target.value\n    });\n  }\n\n    //below function is called whenever date input field is changed.\n  changeDate(event){\n    event.preventDefault();\n    this.setState({\n        date:event.target.value\n    });\n  }\n\n  //below function is called whenever description input field is changed.\n  changeDesc(event){\n    event.preventDefault();\n    this.setState({\n      description:event.target.value\n    });\n  }\n  changeDueDate(event){\n    event.preventDefault();\n    this.setState({\n      dueDate:event.target.value\n    });\n  }\n\n  changeDueTime(event){\n    event.preventDefault();\n    this.setState({\n      dueTime:event.target.value\n    });\n  }\n\n  // below function is called when edit button is clicked.\n  editItems(){\n    this.setState({\n      disabled:false\n    })\n  }\n  //it is called to show or hide the description  \n  toogleDescription(){\n    if(this.state.disabled === true){\n      this.setState({\n        showDescription: !this.state.showDescription\n    });\n    }\n  }\n\n  render(){\n    return ( \n        <div className={`item-div  ${this.state.status === true ? \"green-border\":\"red-border\"}`} onClick={this.toogleDescription.bind(this)}>\n          <button className=\"delete-btn red-background\" onClick={this.deleteItem.bind(this)}>Delete</button>\n          <button className=\"edit-btn\" onClick={this.editItems.bind(this)} hidden={!this.state.disabled}>Edit</button>\n        {/* form will show the data and edit the data */}\n        <form>\n          <label>Title : </label>\n          <input type=\"text\" name=\"title\" value={this.state.title} onChange={this.changeTitle.bind(this)}  disabled={this.state.disabled} />\n          <br /><br />\n          { this.state.showDescription &&\n            <div>\n                        <label>Description : </label>\n                        {/* description value */}\n                        <input type=\"text\" name=\"desc\" value={this.state.description} onChange={this.changeDesc.bind(this)} disabled={this.state.disabled}  />\n                        <br></br><br></br>\n                        <label>Due Date : </label>\n                        {/* description value */}\n                        <input type=\"text\" name=\"dueDate\" value={this.state.dueDate} onChange={this.changeDueDate.bind(this)} disabled={this.state.disabled}  />\n                        <br></br><br></br>\n                        <label>Due Time : </label>\n                        {/* description value */}\n                        <input type=\"text\" name=\"dueTime\" value={this.state.dueTime} onChange={this.changeDueTime.bind(this)} disabled={this.state.disabled}  />\n                        <br></br><br></br>\n            </div>\n          }\n         {\n            this.state.status ?\n            <div>\n               <span>Status : </span>\n              <span className=\"complete\"> Completed </span><br></br><br></br>\n              <button disabled>completed</button>\n            </div> : \n            <div>\n               <span>Status : </span>\n              <span className=\"pending\"> Pending </span><br></br><br></br>\n              <button onClick={this.markcomplete.bind(this)}>Mark as a complete</button>\n              <button onClick={this.updateItem.bind(this)} hidden={this.state.disabled} >UPDATE</button>\n            </div>\n          }\n        <p>Created Date : {this.state.createdDate} &nbsp; &nbsp; Created Time : {this.state.createdTime}</p>\n        </form>\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport './Items.scss';\n\nimport Item from '../item/Item';\n//  ----------------------Item List -----------------\nexport default class extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={\n      items:[],\n      isloaded:false\n    };\n  }\n  //it will call the api and get all the items.\n  componentDidMount(){\n    //api headers are set here\n    const requestOptions = {\n      method: 'GET',\n    };\n    //API is called here to fetch todo details\n    fetch('http://localhost:3000/todos/', requestOptions)\n      .then(response => response.json())\n      .then(data => \n        this.setState({items:data,isloaded:true}));\n  }\n\n  render(){\n    let items = this.state.items.map(c=>\n      <Item obj={c} callback={this.componentDidMount.bind(this)}/>\n    );\n    return ( \n      <div>\n      <h3>To-do Items :</h3> <button className=\"refresh-btn\" onClick={this.componentDidMount.bind(this)}> Refresh</button>\n      <div className=\"item-list\">\n        {items}\n      </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport NavBar from './nav-bar/NavBar';\nimport AddNewBtn from './add-new-Btn/AddNewBtn';\nimport AddNewItem from './add-new-item/AddNewItem';\nimport Items from './items/Items';\n\n/* in constructor newItem field of state is declared */\nexport default class App extends React.Component{\n  \n  constructor(props){\n    super(props);\n    this.state={\n      newItem:false,\n      items:[],\n      forRefresh:false\n    };\n  }\n\n\n  /* changeNewItem will take a boolean parameter and set the value of newItem */\n  changeNewItem(bool){\n    this.setState({\n      newItem:bool\n    });\n  }\n\n  handler() {\n    this.setState({forRefresh:true});\n  }\n\n  // Render add new button in UI\n  render(){\n        return (\n        <div>\n        <NavBar />\n        <AddNewBtn addDiv={this.changeNewItem.bind(this)} />\n         {/* when button is clicked it will render below code */}\n        {this.state.newItem &&\n          <AddNewItem handler = {this.handler}/>\n        }\n        <Items/>\n        </div>\n        );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n// -------------- Unregister ---------------\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/main.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n//  Render React Dom\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}